<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-14 at 23:20:23.
 */
class DistanceTest extends \PHPUnit_Framework_TestCase
{

    protected function setUp()
    {
    }

    protected function tearDown()
    {
    }

    /**
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Euclidean
     * @expectedException Math\Distance\IncompatibleItemsException
     */
    public function testIncompatibleItemsException()
    {
        $e = new Math\Distance\Euclidean();
        $e->validParameters(array(1,2,3), array(1,2,3,4));
    }

    /**
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance::distance
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Euclidean
     */
    public function testEuclidean()
    {
        $d = new Math\Distance(new Math\Distance\Euclidean());
        $this->assertEquals(
          sqrt(4+1+25+4),
          $d->data(array(2,4,6,7), array(4,5,1,9))->distance()
        );
    }


    /**
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance::distance
     * @covers Math\Distance::algorithm
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Euclidean
     * @covers Math\Distance\Manhattan::distance
     */
    public function testChangeAlgorithm()
    {
        $d = new Math\Distance(new Math\Distance\Euclidean());
        $d->algorithm(new Math\Distance\Manhattan());
        $this->assertEquals(
          16,
          $d->data(array(3,4,2,1), array(0,5,6,9))->distance()
        );
    }

    /**
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Euclidean
     * @expectedException Math\Distance\NonNumericException
     * @expectedExceptionMessage Vectors must contain numeric data, non-numeric item found: a
     */
    public function testValidParameters()
    {
        $e = new Math\Distance\Euclidean();
        $e->validParameters(array(2,'a',6,7), array(4,5,1,9));
    }

    /**
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance::distance
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Minkowski::__construct
     * @covers Math\Distance\Minkowski::distance
     */
    public function testMinkowski()
    {
        $d = new Math\Distance(new Math\Distance\Minkowski(3));
        $this->assertEquals(
          pow(pow(3,3)+pow(1,3)+pow(4,3)+pow(8,3),(1/3)),
          $d->data(array(0,5,6,9), array(3,4,2,1))->distance()
        );
    }

    /**
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance::distance
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Minkowski::__construct
     * @covers Math\Distance\Minkowski::order
     * @covers Math\Distance\Minkowski::distance
     * @covers Math\Distance\Euclidean
     */
    public function testMinkowskiOrder()
    {
        $m = new Math\Distance\Minkowski(3);
        $m->order(2);
        $d = new Math\Distance($m);
        $this->assertEquals(
          sqrt(4+1+25+4),
          $d->data(array(2,4,6,7), array(4,5,1,9))->distance()
        );
    }

    /**
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance::distance
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Minkowski::__construct
     * @covers Math\Distance\Minkowski::order
     * @covers Math\Distance\Minkowski::distance
     * @covers Math\Distance\Manhattan
     */
    public function testMinkowskiToManhattan()
    {
        $d = new Math\Distance(new Math\Distance\Minkowski(1));
        $this->assertEquals(
          16,
          $d->data(array(3,4,2,1), array(0,5,6,9))->distance()
        );
    }

    /**
     * @covers Math\Distance\Minkowski::__construct
     * @covers Math\Distance\Minkowski::order
     * @expectedException Math\Distance\OrderOutOfBoundsException
     */
    public function testMinkowskiOrderOutOfBoundsException()
    {
        $m = new Math\Distance\Minkowski(3);
        $m->order(0);
    }

    /**
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance::distance
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Manhattan::distance
     */
    public function testManhattan()
    {
        $d = new Math\Distance(new Math\Distance\Manhattan());
        $this->assertEquals(
          3,
          $d->data(array(-2,4), array(0,5))->distance()
        );
    }

    /**
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance::distance
     * @covers Math\Distance\Algorithm::validParameters
     * @covers Math\Distance\Chebyshev::distance
     */
    public function testChebyshev()
    {
        $d = new Math\Distance(new Math\Distance\Chebyshev());
        $this->assertEquals(
          8,
          $d->data(array(3,4,2,1), array(0,5,6,9))->distance()
        );
    }

    /**
     *
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance::distance
     * @covers Math\Distance\Hamming::validParameters
     * @covers Math\Distance\Hamming::distance
     */
    public function testHamming()
    {
        $d = new Math\Distance(new Math\Distance\Hamming());
        $this->assertEquals(
          2,
          $d->data('1011101', '1001001')->distance()
        );
    }

    /**
     *
     * @covers Math\Distance::__construct
     * @covers Math\Distance::data
     * @covers Math\Distance\Hamming::validParameters
     * @expectedException Math\Distance\IncompatibleItemsException
     */
    public function testHammingIncompatibleItemsException()
    {
        $d = new Math\Distance(new Math\Distance\Hamming());
        $d->data('human','hologram');
    }

}
