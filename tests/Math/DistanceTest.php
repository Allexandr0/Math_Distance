<?php
namespace PEAR2\Math;

$current_path='/home/jesus/devel/jmc/github/PEAR2_Math_Distance';
require_once $current_path.'/src/Math/Distance.php';
require_once $current_path.'/src/Math/Distance/Exception.php';


/**
 * Test class for PEAR2\Math\Distance
 *
 * Modified from the autogenerated skeleton to better support the namespace
 *
 */
class DistanceTest extends \PHPUnit_Framework_TestCase
{

    protected function setUp()
    {
    }

    protected function tearDown()
    {
    }

    /**
     * Generated from @assert (array(1,2,3), array(1,2,3,4)) throws PEAR2\Math\Distance\Exception.
     * @expectedException PEAR2\Math\Distance\Exception
     */
    public function testEuclidean()
    {
        Distance::euclidean(array(1,2,3), array(1,2,3,4));
    }

    /**
     * Generated from @assert (array(1,2), array(3,4)) == sqrt(8).
     */
    public function testEuclidean2()
    {
        $this->assertEquals(
          sqrt(8),
          Distance::euclidean(array(1,2), array(3,4))
        );
    }

    /**
     * Generated from @assert (array(2,4,6,7), array(4,5,1,9)) == sqrt(4+1+25+4).
     */
    public function testEuclidean3()
    {
        $this->assertEquals(
          sqrt(4+1+25+4),
          Distance::euclidean(array(2,4,6,7), array(4,5,1,9))
        );
    }

    /**
     * Generated from @assert (array(1,2,3), array(1,2,3,4), 2) throws PEAR2\Math\Distance\Exception.
     * @expectedException PEAR2\Math\Distance\Exception
     */
    public function testMinkowski()
    {
        Distance::minkowski(array(1,2,3), array(1,2,3,4), 2);
    }

    /**
     * Generated from @assert (array(3,4,2,1), array(0,5,6,9), 3) == pow(pow(3,3)+pow(1,3)+pow(4,3)+pow(8,3),1/3).
     */
    public function testMinkowski2()
    {
        $this->assertEquals(
          pow(pow(3,3)+pow(1,3)+pow(4,3)+pow(8,3),1/3),
          Distance::minkowski(array(3,4,2,1), array(0,5,6,9), 3)
        );
    }

    /**
     * Generated from @assert (array(3,4,2,1), array(0,5,6,9), 4.2) == pow(pow(3,3)+pow(1,3)+pow(4,3)+pow(8,3),1/4.2).
     */
    public function testMinkowski3()
    {
        $this->assertEquals(
          pow(pow(3,3)+pow(1,3)+pow(4,3)+pow(8,3),1/4.2),
          Distance::minkowski(array(3,4,2,1), array(0,5,6,9), 4.2)
        );
    }

    /**
     * Generated from @assert (array(1,2,3), array(1,2,3,4)) throws PEAR2\Math\Distance\Exception.
     * @expectedException PEAR2\Math\Distance\Exception
     */
    public function testManhattan()
    {
        Distance::manhattan(array(1,2,3), array(1,2,3,4));
    }

    /**
     * Generated from @assert (array(3,4,2,1), array(0,5,6,9)) == 16.
     */
    public function testManhattan2()
    {
        $this->assertEquals(
          16,
          Distance::manhattan(array(3,4,2,1), array(0,5,6,9))
        );
    }

    /**
     * Generated from @assert (array(-2,4), array(0,5)) == 3.
     */
    public function testManhattan3()
    {
        $this->assertEquals(
          3,
          Distance::manhattan(array(-2,4), array(0,5))
        );
    }

    /**
     * Generated from @assert (array(1,2,3), array(1,2,3,4)) throws PEAR2\Math\Distance\Exception.
     * @expectedException PEAR2\Math\Distance\Exception
     */
    public function testChebyshev()
    {
        Distance::chebyshev(array(1,2,3), array(1,2,3,4));
    }

    /**
     * Generated from @assert (array(3,4,2,1), array(0,5,6,9)) == 8.
     */
    public function testChebyshev2()
    {
        $this->assertEquals(
          8,
          Distance::chebyshev(array(3,4,2,1), array(0,5,6,9))
        );
    }

    /**
     * Generated from @assert (array(-2,4), array(0,5)) == 2.
     */
    public function testChebyshev3()
    {
        $this->assertEquals(
          2,
          Distance::chebyshev(array(-2,4), array(0,5))
        );
    }

    /**
     * Generated from @assert ('1011101', '1001001') == 2.
     */
    public function testHamming()
    {
        $this->assertEquals(
          2,
          Distance::hamming('1011101', '1001001')
        );
    }

    /**
     * Generated from @assert ('chemistry', 'dentistry') == 4.
     */
    public function testHamming2()
    {
        $this->assertEquals(
          4,
          Distance::hamming('chemistry', 'dentistry')
        );
    }
}
?>
