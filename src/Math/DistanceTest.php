<?php
require "Distance.php";
require "Distance/Exception.php";
require "Distance/IncompatibleItemsException.php";
require "Distance/NonNumericException.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-14 at 23:20:23.
 */
class DistanceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert (array(1,2,3), array(1,2,3,4)) throws Math\Distance\IncompatibleItemsException.
     *
     * @covers Math\Distance::euclidean
     * @expectedException Math\Distance\IncompatibleItemsException
     */
    public function testEuclidean()
    {
        Math\Distance::euclidean(array(1,2,3), array(1,2,3,4));
    }

    /**
     * Generated from @assert (array(1,2), array(3,4)) == sqrt(8).
     *
     * @covers Math\Distance::euclidean
     */
    public function testEuclidean2()
    {
        $this->assertEquals(
          sqrt(8),
          Math\Distance::euclidean(array(1,2), array(3,4))
        );
    }

    /**
     * Generated from @assert (array(2,4,6,7), array(4,5,1,9)) == sqrt(4+1+25+4).
     *
     * @covers Math\Distance::euclidean
     */
    public function testEuclidean3()
    {
        $this->assertEquals(
          sqrt(4+1+25+4),
          Math\Distance::euclidean(array(2,4,6,7), array(4,5,1,9))
        );
    }

    /**
     * Generated from @assert (array(1,2,3), array(1,2,3,4), 2) throws Math\Distance\IncompatibleItemsException.
     *
     * @covers Math\Distance::minkowski
     * @expectedException Math\Distance\IncompatibleItemsException
     */
    public function testMinkowski()
    {
        Math\Distance::minkowski(array(1,2,3), array(1,2,3,4), 2);
    }

    /**
     * Generated from @assert (array(0,5,6,9), array(3,4,2,1), 3) == pow(pow(3,3)+pow(1,3)+pow(4,3)+pow(8,3),1/3).
     *
     * @covers Math\Distance::minkowski
     */
    public function testMinkowski2()
    {
        $this->assertEquals(
          pow(pow(3,3)+pow(1,3)+pow(4,3)+pow(8,3),(1/3)),
          Math\Distance::minkowski(array(0,5,6,9), array(3,4,2,1), 3)
        );
    }

    /**
     * Generated from @assert (array(0,5,6,9), array(3,4,2,1), 4) == pow(pow(3,3)+pow(1,3)+pow(4,3)+pow(8,3),1/4).
     *
     * @covers Math\Distance::minkowski
     */
    public function testMinkowski3()
    {
        $this->assertEquals(
          pow(pow(3,4)+pow(1,4)+pow(4,4)+pow(8,4),1/4),
          Math\Distance::minkowski(array(0,5,6,9), array(3,4,2,1), 4)
        );
    }

    /**
     * Generated from @assert (array(1,2,3), array(1,2,3,4)) throws Math\Distance\IncompatibleItemsException.
     *
     * @covers Math\Distance::manhattan
     * @expectedException Math\Distance\IncompatibleItemsException
     */
    public function testManhattan()
    {
        Math\Distance::manhattan(array(1,2,3), array(1,2,3,4));
    }

    /**
     * Generated from @assert (array(3,4,2,1), array(0,5,6,9)) == 16.
     *
     * @covers Math\Distance::manhattan
     */
    public function testManhattan2()
    {
        $this->assertEquals(
          16,
          Math\Distance::manhattan(array(3,4,2,1), array(0,5,6,9))
        );
    }

    /**
     * Generated from @assert (array(-2,4), array(0,5)) == 3.
     *
     * @covers Math\Distance::manhattan
     */
    public function testManhattan3()
    {
        $this->assertEquals(
          3,
          Math\Distance::manhattan(array(-2,4), array(0,5))
        );
    }

    /**
     * Generated from @assert (array(1,2,3), array(1,2,3,4)) throws Math\Distance\IncompatibleItemsException.
     *
     * @covers Math\Distance::chebyshev
     * @expectedException Math\Distance\IncompatibleItemsException
     */
    public function testChebyshev()
    {
        Math\Distance::chebyshev(array(1,2,3), array(1,2,3,4));
    }

    /**
     * Generated from @assert (array(3,4,2,1), array(0,5,6,9)) == 8.
     *
     * @covers Math\Distance::chebyshev
     */
    public function testChebyshev2()
    {
        $this->assertEquals(
          8,
          Math\Distance::chebyshev(array(3,4,2,1), array(0,5,6,9))
        );
    }

    /**
     * Generated from @assert (array(-2,4), array(0,5)) == 2.
     *
     * @covers Math\Distance::chebyshev
     */
    public function testChebyshev3()
    {
        $this->assertEquals(
          2,
          Math\Distance::chebyshev(array(-2,4), array(0,5))
        );
    }

    /**
     * Generated from @assert ('australopitecus', 'bird') throws Math\Distance\IncompatibleItemsException.
     *
     * @covers Math\Distance::hamming
     * @expectedException Math\Distance\IncompatibleItemsException
     */
    public function testHamming()
    {
        Math\Distance::hamming('australopitecus', 'bird');
    }

    /**
     * Generated from @assert ('1011101', '1001001') == 2.
     *
     * @covers Math\Distance::hamming
     */
    public function testHamming2()
    {
        $this->assertEquals(
          2,
          Math\Distance::hamming('1011101', '1001001')
        );
    }

    /**
     * Generated from @assert ('chemistry', 'dentistry') == 4.
     *
     * @covers Math\Distance::hamming
     */
    public function testHamming3()
    {
        $this->assertEquals(
          4,
          Math\Distance::hamming('chemistry', 'dentistry')
        );
    }
}
